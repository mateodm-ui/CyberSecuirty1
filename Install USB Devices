<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Computer Lab</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            overflow: hidden;
        }
        .task-list-item.completed {
            text-decoration: line-through;
            color: #4ade80; /* green-400 */
        }
        .task-list-item.current {
            font-weight: 700;
            color: #facc15; /* yellow-400 */
        }
        .device {
            border: 2px solid #4b5563; /* gray-600 */
            transition: all 0.2s ease-in-out;
        }
        .device-image {
            max-width: 150px;
            height: auto;
            margin-bottom: 1rem;
        }
        .port-container {
            position: relative;
        }
        .port {
            border: 2px dashed #6b7280; /* gray-500 */
            transition: all 0.2s ease-in-out;
            background-color: rgba(55, 65, 81, 0.7); /* gray-700 with opacity */
            width: 30px;
            height: 20px;
            position: absolute;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .port.drag-over {
            background-color: #facc15; /* yellow-400 */
            border-style: solid;
        }
        .port.connected {
            background-color: transparent;
            border-color: #4ade80; /* green-400 */
            border-style: solid;
            cursor: not-allowed;
        }
        .port.connected img {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
        .connector {
            cursor: grab;
            transition: transform 0.2s;
            width: 50px;
            height: 50px;
        }
        .connector:active {
            cursor: grabbing;
            transform: scale(1.1);
        }
        .view { display: none; }
        .view.active { display: block; }
        .inventory-item:hover { background-color: #374151; }
        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 50;
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-200">

    <div id="game-container" class="flex flex-col md:flex-row h-screen w-screen p-4 gap-4">

        <!-- Left Panel: Instructions & Inventory -->
        <div class="w-full md:w-1/3 lg:w-1/4 flex flex-col gap-4 overflow-y-auto">
            <!-- Instructions -->
            <div class="bg-gray-800 p-4 rounded-lg shadow-lg">
                <h2 class="text-xl font-bold mb-3 border-b border-gray-600 pb-2">Lab Objectives</h2>
                <ul id="task-list" class="space-y-2 text-sm"></ul>
            </div>

            <!-- Inventory -->
            <div class="bg-gray-800 p-4 rounded-lg shadow-lg flex-grow">
                <h2 class="text-xl font-bold mb-3 border-b border-gray-600 pb-2">Inventory</h2>
                <div id="inventory"></div>
            </div>

            <!-- Selected Item -->
            <div id="selected-item-panel" class="bg-gray-800 p-4 rounded-lg shadow-lg hidden">
                <h3 class="font-bold mb-2">Selected Cable</h3>
                <div id="selected-item-connectors" class="flex justify-around items-center"></div>
            </div>
        </div>

        <!-- Right Panel: Workspace -->
        <div class="w-full md:w-2/3 lg:w-3/4 bg-gray-800 p-4 rounded-lg shadow-inner overflow-auto">
            <h1 class="text-2xl font-bold mb-4 text-center">Workspace</h1>
            <div id="workspace" class="min-h-[80vh] bg-gray-700/50 rounded-lg p-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 place-items-center"></div>
        </div>
    </div>

    <!-- Feedback Modal -->
    <div id="feedback-modal" class="modal-backdrop hidden">
        <div id="feedback-content" class="bg-gray-800 rounded-lg shadow-2xl p-8 max-w-sm text-center">
            <h3 id="feedback-title" class="text-2xl font-bold mb-4"></h3>
            <p id="feedback-message"></p>
            <button id="feedback-close" class="mt-6 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg w-full">Close</button>
        </div>
    </div>


    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- DOM ELEMENTS ---
            const workspace = document.getElementById('workspace');
            const inventoryEl = document.getElementById('inventory');
            const taskListEl = document.getElementById('task-list');
            const selectedItemPanel = document.getElementById('selected-item-panel');
            const selectedItemConnectors = document.getElementById('selected-item-connectors');
            const feedbackModal = document.getElementById('feedback-modal');
            const feedbackTitle = document.getElementById('feedback-title');
            const feedbackMessage = document.getElementById('feedback-message');
            const feedbackClose = document.getElementById('feedback-close');

            // --- GAME STATE ---
            let gameState = { currentStep: 0, draggedConnector: null, selectedCable: null, devicesInWorkspace: new Set() };

            const tasks = [
                { id: 'add_hub', description: 'Add External USB Hub to Workspace', type: 'add_device', device: 'usb_hub' },
                { id: 'connect_hub_to_pc_1', description: 'Connect USB Mini-B to USB Hub', type: 'connect', cable: 'usb_mini_a', connector: 'usb_mini_b', targetDevice: 'usb_hub', targetPort: 'usb_mini_b' },
                { id: 'connect_hub_to_pc_2', description: 'Connect USB-A to Computer', type: 'connect', cable: 'usb_mini_a', connector: 'usb_a', targetDevice: 'computer', targetPort: 'usb_a' },
                { id: 'add_inkjet', description: 'Add Inkjet Printer to Workspace', type: 'add_device', device: 'inkjet_printer' },
                { id: 'connect_inkjet_to_hub_1', description: 'Connect USB-B to Inkjet Printer', type: 'connect', cable: 'usb_b_a', connector: 'usb_b', targetDevice: 'inkjet_printer', targetPort: 'usb_b' },
                { id: 'connect_inkjet_to_hub_2', description: 'Connect USB-A to USB Hub', type: 'connect', cable: 'usb_b_a', connector: 'usb_a', targetDevice: 'usb_hub', targetPort: 'usb_a' },
                { id: 'add_laser', description: 'Add Laser Printer to Workspace', type: 'add_device', device: 'laser_printer' },
                { id: 'connect_laser_to_hub_1', description: 'Connect USB-B to Laser Printer', type: 'connect', cable: 'usb_b_a', connector: 'usb_b', targetDevice: 'laser_printer', targetPort: 'usb_b' },
                { id: 'connect_laser_to_hub_2', description: 'Connect USB-A to USB Hub', type: 'connect', cable: 'usb_b_a', connector: 'usb_a', targetDevice: 'usb_hub', targetPort: 'usb_a' },
                { id: 'add_scanner', description: 'Add Scanner to Workspace', type: 'add_device', device: 'scanner' },
                { id: 'connect_scanner_to_hub_1', description: 'Connect USB-B to Scanner', type: 'connect', cable: 'usb_b_a', connector: 'usb_b', targetDevice: 'scanner', targetPort: 'usb_b' },
                { id: 'connect_scanner_to_hub_2', description: 'Connect USB-A to USB Hub', type: 'connect', cable: 'usb_b_a', connector: 'usb_a', targetDevice: 'usb_hub', targetPort: 'usb_a' },
                { id: 'add_hdd', description: 'Add Portable Hard Drive to Workspace', type: 'add_device', device: 'portable_hdd' },
                { id: 'connect_hdd_to_pc_1', description: 'Connect USB Mini-B to Hard Drive', type: 'connect', cable: 'usb_mini_a', connector: 'usb_mini_b', targetDevice: 'portable_hdd', targetPort: 'usb_mini_b' },
                { id: 'connect_hdd_to_pc_2', description: 'Connect USB-A to Computer', type: 'connect', cable: 'usb_mini_a', connector: 'usb_a', targetDevice: 'computer', targetPort: 'usb_a' },
            ].map(task => ({ ...task, completed: false }));

            const inventoryData = {
                'Networking Devices': [{ id: 'usb_hub', name: 'External USB Hub' }],
                'Printers & Scanners': [{ id: 'inkjet_printer', name: 'Inkjet Printer' }, { id: 'laser_printer', name: 'Laser Printer' }, { id: 'scanner', name: 'Scanner' }],
                'Storage': [{ id: 'portable_hdd', name: 'Portable USB Hard Drive' }],
                'Cables': [{ id: 'usb_mini_a', name: 'USB Cable (Mini-B to A)' }, { id: 'usb_b_a', name: 'USB Cable (B to A)' }]
            };

            const devices = {
                computer: {
                    name: 'Computer',
                    images: {
                        front: 'https://placehold.co/200x200/334155/ffffff?text=PC+Front',
                        back: 'https://placehold.co/200x200/475569/ffffff?text=PC+Back'
                    },
                    views: {
                        front: ``,
                        back: `<div class="port-container">
                                 <div class="port" data-port-type="usb_a" data-device-id="computer" style="top: 20px; left: 85px;"></div>
                                 <div class="port" data-port-type="usb_a" data-device-id="computer" style="top: 45px; left: 85px;"></div>
                                 <div class="port" data-port-type="usb_a" data-device-id="computer" style="top: 70px; left: 85px;"></div>
                                 <div class="port" data-port-type="usb_a" data-device-id="computer" style="top: 95px; left: 85px;"></div>
                               </div>`
                    }
                },
                usb_hub: {
                    name: 'USB Hub',
                    images: {
                        front: 'https://placehold.co/200x150/52525b/ffffff?text=Hub+Front',
                        back: 'https://placehold.co/200x150/71717a/ffffff?text=Hub+Back'
                    },
                    views: {
                        front: `<div class="port-container">
                                  <div class="port" data-port-type="usb_a" data-device-id="usb_hub" style="top: 65px; left: 30px;"></div>
                                  <div class="port" data-port-type="usb_a" data-device-id="usb_hub" style="top: 65px; left: 70px;"></div>
                                  <div class="port" data-port-type="usb_a" data-device-id="usb_hub" style="top: 65px; left: 110px;"></div>
                                  <div class="port" data-port-type="usb_a" data-device-id="usb_hub" style="top: 65px; left: 150px;"></div>
                                </div>`,
                        back: `<div class="port-container"><div class="port" data-port-type="usb_mini_b" data-device-id="usb_hub" style="top: 65px; left: 85px;"></div></div>`
                    }
                },
                inkjet_printer: { name: 'Inkjet Printer', images: { back: 'https://placehold.co/200x200/a1a1aa/000000?text=Inkjet' }, views: { back: `<div class="port-container"><div class="port" data-port-type="usb_b" data-device-id="inkjet_printer" style="top: 80px; left: 150px;"></div></div>` } },
                laser_printer: { name: 'Laser Printer', images: { back: 'https://placehold.co/200x200/d4d4d8/000000?text=Laser' }, views: { back: `<div class="port-container"><div class="port" data-port-type="usb_b" data-device-id="laser_printer" style="top: 120px; left: 160px;"></div></div>` } },
                scanner: { name: 'Scanner', images: { back: 'https://placehold.co/200x150/e5e5e5/000000?text=Scanner' }, views: { back: `<div class="port-container"><div class="port" data-port-type="usb_b" data-device-id="scanner" style="top: 60px; left: 160px;"></div></div>` } },
                portable_hdd: { name: 'Portable Hard Drive', images: { back: 'https://placehold.co/150x100/18181b/ffffff?text=HDD' }, views: { back: `<div class="port-container"><div class="port" data-port-type="usb_mini_b" data-device-id="portable_hdd" style="top: 40px; left: 10px;"></div></div>` } }
            };

            const cables = {
                usb_mini_a: { name: 'USB Cable (Mini-B to A)', connectors: [{ type: 'usb_mini_b', name: 'Mini-B' }, { type: 'usb_a', name: 'Type A' }] },
                usb_b_a: { name: 'USB Cable (B to A)', connectors: [{ type: 'usb_b', name: 'Type B' }, { type: 'usb_a', name: 'Type A' }] }
            };
            
            const connectorImages = {
                usb_a: 'https://placehold.co/50x50/3b82f6/ffffff?text=A',
                usb_b: 'https://placehold.co/50x50/16a34a/ffffff?text=B',
                usb_mini_b: 'https://placehold.co/50x50/9333ea/ffffff?text=Mini'
            };

            function init() {
                renderInventory();
                renderTaskList();
                addDeviceToWorkspace('computer');
                addDragDropListeners();
                feedbackClose.addEventListener('click', () => feedbackModal.classList.add('hidden'));
            }

            function renderTaskList() {
                taskListEl.innerHTML = tasks.map((task, index) => {
                    const classes = ['task-list-item', 'transition-all', 'duration-300'];
                    if (task.completed) classes.push('completed');
                    else if (index === gameState.currentStep) classes.push('current');
                    return `<li class="${classes.join(' ')}">${task.description}</li>`;
                }).join('');
            }

            function renderInventory() {
                inventoryEl.innerHTML = Object.entries(inventoryData).map(([category, items]) => `
                    <h3 class="font-semibold mt-4 mb-2 text-gray-400">${category}</h3>
                    <ul class="space-y-1">
                        ${items.map(item => `
                            <li class="p-2 rounded-md cursor-pointer inventory-item" data-item-id="${item.id}" data-item-type="${category === 'Cables' ? 'cable' : 'device'}">
                                ${item.name}
                            </li>`).join('')}
                    </ul>
                `).join('');
            }

            function createDeviceElement(deviceId) {
                const deviceData = devices[deviceId];
                const deviceEl = document.createElement('div');
                deviceEl.id = `device-${deviceId}`;
                deviceEl.className = 'device bg-gray-900 rounded-lg p-4 w-full max-w-xs flex flex-col items-center';
                deviceEl.dataset.deviceId = deviceId;

                const viewButtons = Object.keys(deviceData.views).length > 1 ? Object.keys(deviceData.views).map(viewName =>
                    `<button class="change-view-btn px-2 py-1 text-xs bg-blue-600 hover:bg-blue-700 rounded" data-view="${viewName}">${viewName.charAt(0).toUpperCase() + viewName.slice(1)}</button>`
                ).join(' ') : '';

                deviceEl.innerHTML = `
                    <h4 class="font-bold text-center">${deviceData.name}</h4>
                    <div class="flex gap-2 my-2 h-8">${viewButtons}</div>
                    <div class="relative">
                        <img src="" alt="${deviceData.name}" class="device-image rounded bg-gray-700">
                        <div class="views-container absolute top-0 left-0 w-full h-full">
                            ${Object.entries(deviceData.views).map(([name, html], index) => `
                                <div class="view ${index === 0 ? 'active' : ''}" data-view-name="${name}">${html}</div>
                            `).join('')}
                        </div>
                    </div>
                `;

                const defaultView = deviceData.views.back ? 'back' : Object.keys(deviceData.views)[0];
                switchView(deviceEl, defaultView);
                return deviceEl;
            }

            function addDeviceToWorkspace(deviceId) {
                if (gameState.devicesInWorkspace.has(deviceId)) return;
                const deviceEl = createDeviceElement(deviceId);
                workspace.appendChild(deviceEl);
                gameState.devicesInWorkspace.add(deviceId);
                deviceEl.querySelectorAll('.change-view-btn').forEach(btn => {
                    btn.addEventListener('click', () => switchView(deviceEl, btn.dataset.view));
                });
            }

            function switchView(deviceEl, viewName) {
                const deviceId = deviceEl.dataset.deviceId;
                const deviceData = devices[deviceId];
                const imgEl = deviceEl.querySelector('.device-image');
                imgEl.src = deviceData.images[viewName] || deviceData.images[Object.keys(deviceData.images)[0]];
                
                deviceEl.querySelectorAll('.view').forEach(v => v.classList.remove('active'));
                const viewToShow = deviceEl.querySelector(`.view[data-view-name="${viewName}"]`);
                if (viewToShow) viewToShow.classList.add('active');
            }

            function selectCable(cableId) {
                gameState.selectedCable = cableId;
                const cableData = cables[cableId];
                selectedItemPanel.classList.remove('hidden');
                selectedItemConnectors.innerHTML = cableData.connectors.map(c => `
                    <div class="text-center">
                        <div class="connector bg-gray-700 p-2 rounded-lg border-2 border-gray-600" draggable="true" data-connector-type="${c.type}" data-cable-id="${cableId}">
                            ${getConnectorImageHTML(c.type)}
                        </div>
                        <span class="text-xs mt-1 block">${c.name}</span>
                    </div>
                `).join('<div class="text-2xl font-bold text-gray-500">-</div>');
            }

            function getConnectorImageHTML(type) {
                return `<img src="${connectorImages[type]}" alt="${type} connector" draggable="false">`;
            }

            function advanceStep() {
                if (gameState.currentStep < tasks.length) {
                    tasks[gameState.currentStep].completed = true;
                    gameState.currentStep++;
                    renderTaskList();
                    if (gameState.currentStep === tasks.length) {
                        showFeedback('Lab Complete!', 'Congratulations! You have successfully connected all the devices.', 'success');
                    }
                }
            }

            function showFeedback(title, message, type = 'error') {
                feedbackTitle.textContent = title;
                feedbackMessage.textContent = message;
                feedbackTitle.className = `text-2xl font-bold mb-4 ${type === 'success' ? 'text-green-400' : 'text-red-400'}`;
                feedbackModal.classList.remove('hidden');
            }

            inventoryEl.addEventListener('click', (e) => {
                const item = e.target.closest('.inventory-item');
                if (!item) return;
                const { itemId, itemType } = item.dataset;
                const currentTask = tasks[gameState.currentStep];
                if (itemType === 'device') {
                    if (currentTask.type === 'add_device' && currentTask.device === itemId) {
                        addDeviceToWorkspace(itemId);
                        advanceStep();
                    } else {
                        showFeedback('Incorrect Step', `Please follow the instructions. Current task: ${currentTask.description}`);
                    }
                } else if (itemType === 'cable') {
                    selectCable(itemId);
                }
            });

            function addDragDropListeners() {
                document.addEventListener('dragstart', e => {
                    if (e.target.classList.contains('connector')) {
                        gameState.draggedConnector = e.target;
                        setTimeout(() => e.target.classList.add('opacity-50'), 0);
                    }
                });
                document.addEventListener('dragend', e => {
                    if (e.target.classList.contains('connector')) {
                        e.target.classList.remove('opacity-50');
                        gameState.draggedConnector = null;
                    }
                });
                workspace.addEventListener('dragover', e => {
                    e.preventDefault();
                    const port = e.target.closest('.port:not(.connected)');
                    if (port) port.classList.add('drag-over');
                });
                workspace.addEventListener('dragleave', e => {
                    const port = e.target.closest('.port');
                    if (port) port.classList.remove('drag-over');
                });
                workspace.addEventListener('drop', e => {
                    e.preventDefault();
                    const port = e.target.closest('.port:not(.connected)');
                    if (!port || !gameState.draggedConnector) {
                        document.querySelectorAll('.port.drag-over').forEach(p => p.classList.remove('drag-over'));
                        return;
                    }
                    port.classList.remove('drag-over');
                    const { connectorType, cableId } = gameState.draggedConnector.dataset;
                    const { portType, deviceId } = port.dataset;
                    const currentTask = tasks[gameState.currentStep];

                    if (currentTask.type !== 'connect' || currentTask.cable !== cableId || currentTask.connector !== connectorType || currentTask.targetDevice !== deviceId || currentTask.targetPort !== portType) {
                        const errorMessages = {
                            'connect': 'The current task is not a connection step.',
                            'cable': `Please select and use the ${cables[currentTask.cable]?.name || 'correct cable'}.`,
                            'connector': 'You are holding the wrong end of the cable.',
                            'targetDevice': `This connector goes to the ${devices[currentTask.targetDevice]?.name || 'correct device'}.`,
                            'targetPort': 'This connector does not fit in this type of port.'
                        };
                        let errorKey = 'connect';
                        if (currentTask.type === 'connect') {
                            if (currentTask.cable !== cableId) errorKey = 'cable';
                            else if (currentTask.connector !== connectorType) errorKey = 'connector';
                            else if (currentTask.targetDevice !== deviceId) errorKey = 'targetDevice';
                            else if (currentTask.targetPort !== portType) errorKey = 'targetPort';
                        }
                        showFeedback('Incorrect Action', errorMessages[errorKey]);
                        return;
                    }

                    port.classList.add('connected');
                    port.innerHTML = getConnectorImageHTML(connectorType);
                    gameState.draggedConnector.draggable = false;
                    gameState.draggedConnector.style.cursor = 'not-allowed';
                    gameState.draggedConnector.classList.add('opacity-25');
                    advanceStep();
                });
            }

            init();
        });
    </script>
</body>
</html>
